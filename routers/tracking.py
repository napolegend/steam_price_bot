from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from states.tracking_states import AddTracking, EditTracking
from services.database import add_user, add_tracking, get_user_trackings, get_user_trackings_for_keyboard, \
    delete_tracking_by_id, get_user, update_tracking_threshold
from services.steam import get_game_info
from keyboards.tracking import create_tracking_keyboard

router = Router()


@router.message(Command("subscribe"))
async def start_add_tracking(message: types.Message, state: FSMContext):
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä—ã –≤ Steam:")
    await state.set_state(AddTracking.game_id)


@router.message(AddTracking.game_id, F.text.isdigit())
async def process_game_id(message: types.Message, state: FSMContext):
    game_id = int(message.text)
    game_info = get_game_info(game_id)
    user_id = add_user(message.from_user.id)
    trackings = get_user_trackings(user_id)
    for tracking in trackings:
        if tracking[2] == game_id:
            await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç—É –∏–≥—Ä—É. –ò–∑–º–µ–Ω–∏—Ç–µ –µ–µ –ª–∏–±–æ —É–¥–∞–ª–∏—Ç–µ.")
            await state.clear()
            return
    if not game_info or not game_info.get("name"):
        await message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∏–≥—Ä—ã
    if game_info["is_free"]:
        await message.answer(
            f"üéÆ –ò–≥—Ä–∞: {game_info['name']}\n"
            f"üí∞ –¶–µ–Ω–∞: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
            "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∏–≥—Ä—ã",
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ü–µ–Ω—ã
    if game_info["price"] is None:
        await message.answer(
            f"üéÆ –ò–≥—Ä–∞: {game_info['name']}\n"
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –≤—ã—à–ª–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –†–§.",
           
        )
        await state.clear()
        return

    await state.update_data(game_id=game_id, game_name=game_info["name"])
    await message.answer(
        f"üéÆ –ò–≥—Ä–∞: {game_info['name']}\n"
        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {game_info['price']} —Ä—É–±.\n\n"
        "üîé –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):"
    )
    await state.set_state(AddTracking.threshold)


@router.message(AddTracking.threshold)
async def process_threshold(message: types.Message, state: FSMContext):
    try:
        threshold = float(message.text.replace(',', '.'))
        data = await state.get_data()

        user_id = add_user(message.from_user.id)
        add_tracking(
            user_id=user_id,
            game_id=data["game_id"],
            game_name=data["game_name"],
            threshold=threshold
        )

        await message.answer(
            f"‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üéÆ {data['game_name']}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ü–µ–Ω–µ –Ω–∏–∂–µ: {threshold} —Ä—É–±.",
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499.99)")
        return
    finally:
        await state.clear()


@router.message(Command("list"))
async def list_trackings(message: types.Message):
    user_id = add_user(message.from_user.id)
    trackings = get_user_trackings(user_id)

    if not trackings:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π")
        return

    response = ["üìã –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"]
    for tracking in trackings:
        response.append(
            f"\nüéÆ {tracking[3]} (ID: {tracking[2]})\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏: {tracking[4]} —Ä—É–±.\n"
            f"üÜî ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {tracking[0]}"
        )

    await message.answer("\n".join(response),)


@router.message(Command("unsubscribe"))
async def delete_tracking_start(message: types.Message):
    user_id = add_user(message.from_user.id)
    keyboard = create_tracking_keyboard(user_id, action="delete")

    if not keyboard:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π")
        return

    await message.answer(
        "üîé –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("delete_"))
async def process_tracking_deletion(callback: types.CallbackQuery):
    tracking_id = int(callback.data.split("_")[1])
    user_id = get_user(callback.from_user.id)

    if not user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    deleted = delete_tracking_by_id(tracking_id, user_id)

    if deleted:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")

    await callback.answer()


@router.message(Command("edit"))
async def edit_tracking_start(message: types.Message):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞
    """
    user_id = add_user(message.from_user.id)
    keyboard = create_tracking_keyboard(user_id, "edit")

    if not keyboard:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π")
        return

    await message.answer(
        "üîé –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("edit_"))
async def start_edit_tracking(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    tracking_id = int(callback.data.split("_")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(EditTracking.new_threshold)
    await state.update_data(tracking_id=tracking_id)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(reply_markup=None)

    await callback.message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")
    await callback.answer()


@router.message(EditTracking.new_threshold)
async def process_edit_threshold(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã
    """
    try:
        new_threshold = float(message.text.replace(',', '.'))
        data = await state.get_data()
        tracking_id = data["tracking_id"]
        user_id = get_user(message.from_user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        updated = update_tracking_threshold(tracking_id, user_id, new_threshold)

        if updated:
            await message.answer(f"‚úÖ –ü–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_threshold} —Ä—É–±.")
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499.99)")
        return
    finally:
        await state.clear()