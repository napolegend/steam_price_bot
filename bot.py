import os
import logging
import asyncio

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.fsm.storage.memory import MemoryStorage


from routers import commands, tracking
from services.database import get_trackings, add_price, delete_tracking_by_id
from services.steam import get_game_info

load_dotenv()
# 1) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger()              # –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logger.setLevel(logging.INFO)             # —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# 2) –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_fmt = logging.Formatter(
    "[%(asctime)s] %(levelname)s in %(module)s: %(message)s",
    "%Y-%m-%d %H:%M:%S"
)
console_handler.setFormatter(console_fmt)
logger.addHandler(console_handler)

# 3) –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("bot.log", encoding="utf-8", mode="a")
file_handler.setLevel(logging.INFO)
file_fmt = logging.Formatter(
    "[%(asctime)s] %(levelname)s in %(module)s: %(message)s",
    "%Y-%m-%d %H:%M:%S"
)
file_handler.setFormatter(file_fmt)
logger.addHandler(file_handler)

# –ö–∞–∂–¥—ã–π —á–∞—Å —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–Ω–∞–º –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def check_prices(bot: Bot):
    while True:
        try:
            trackings = get_trackings()
            for t in trackings:
                tracking_id, user_id, game_id, game_name, threshold, created_at = t
                game_info = get_game_info(game_id)

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                if game_info["price"] is None:
                    continue

                current_price = game_info["price"]
                add_price(game_id, current_price)



                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                # P.S. —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 15% –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–æ "–∂–∞–¥–Ω–æ—Å—Ç—å—é" –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–∂–∞–ª–µ–Ω–∏–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π :)
                if current_price <= 1.15 * threshold:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä
                    price_msg = f"{current_price} —Ä—É–±."

                    await bot.send_message(
                        chat_id=user_id,
                        text=f"üî• –¶–µ–Ω–∞ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å!\n\n"
                             f"üéÆ {game_name}\n"
                             f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_msg}\n"
                             f"üîî –í–∞—à –ø–æ—Ä–æ–≥: {threshold} —Ä—É–±."
                    )
                    delete_tracking_by_id(tracking_id,user_id)
        except Exception as e:
            logging.error(f"Price check error: {e}")

        await asyncio.sleep(360)


async def main():
    bot = Bot(os.getenv("TOKEN"))
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(commands.router)
    dp.include_router(tracking.router)

    cmd_menu = [BotCommand(command='start', description='–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
                    BotCommand(command='help', description='–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏'),
                    BotCommand(command='subscribe', description='–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ'),
                    BotCommand(command='unsubscribe', description='–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'),
                    BotCommand(command='list', description='–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏'),
                    BotCommand(command='edit', description='–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'),]
    await bot.set_my_commands(cmd_menu, BotCommandScopeDefault())
    print("Bot is running...")
    asyncio.create_task(check_prices(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.info("Starting bot...")
    asyncio.run(main())


